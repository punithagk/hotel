<?php

/**
 * @file
 * Manages pricing for Bookable Units and displaying dates on the jquery FullCalendar
 * plugin
 */


define('ROOMS_ADD', 'add');
define('ROOMS_SUB', 'sub');
define('ROOMS_REPLACE', 'replace');
define('ROOMS_INCREASE', 'increase');
define('ROOMS_DECREASE', 'decrease');
define('ROOMS_PRICE_SINGLE_OCCUPANCY', 'single_occupancy');
define('ROOMS_DYNAMIC_MODIFIER', 'dynamic_modifier');

/**
 * Implements hook_permission().
 */
function rooms_pricing_permission() {
  $permissions = array(
    'manage booking unit pricing' => array(
      'title' => t('manage booking unit pricing'),
      'description' => t('Allows users to manage pricing settings for Rooms'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function rooms_pricing_menu() {
  $items  =  array();
  
  $items['admin/rooms/units/unit/%pricing_unit/pricing'] = array(
    'title' => 'Manage Pricing',
    'page callback' =>  'rooms_pricing_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'rooms_pricing_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '30',
  );
  
  $items['admin/rooms/units/unit/%pricing_unit/pricing/json/%/%'] = array(
    'title' =>  'Pricing Info',
    'page callback' => 'rooms_pricing_json',
    'page arguments' => array(4, 7, 8, 9, 10, 11, 12),
    'access callback' => 'rooms_pricing_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'weight' => '30',
  );

  $items['admin/rooms/config/currency'] = array(
    'title' => 'Manage Currency Settings',
    'access arguments' => array('manage booking unit pricing'),
    'page callback' => 'system_admin_menu_block_page',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 9,
    'file path' => drupal_get_path('module', 'system'),
    'file' => 'system.admin.inc',
  );
  
  return $items;
}



/**
 * Menu load for units - calls the actuall rooms_unit_load implemented in rooms_unit.module
 */
function pricing_unit_load($unit_id) {
  $unit = rooms_unit_load($unit_id);
  return $unit;
}


/**
 * Room pricing access callback
 * @todo check unauthorised access for calendar js
 */ 
function rooms_pricing_access($rooms_unit) {
  if (user_access('manage booking unit pricing')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Callback for admin/rooms/units/unit/%pricing_unit/pricing - builds pricing
 * page by adding calendar and pulling events from pricing table.
 * 
 */
function rooms_pricing_page(RoomsUnit $rooms_unit, $year='', $month='') {
  
  // Basic check to avoid any uggliness
  $year = check_plain($year);
  $month = check_plain($month);
  
  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;

  // Add all the stuff we will need to show the FullCalendar  
  drupal_add_library('rooms_availability', 'rooms_fullcalendar');
  drupal_add_js(drupal_get_path('module', 'rooms_pricing') . '/js/rooms_pricing.js');
  
  // Inject settings in javascript that we will use
  drupal_add_js(array('roomsPricing' => array('roomID' => $rooms_unit->unit_id)), 'setting');
  drupal_add_js(array('roomsPricing' => array('currentMonth' => $month)), 'setting');
  drupal_add_js(array('roomsPricing' => array('currentYear' => $year)), 'setting');

  // Calculate forward and back dates for our 3-month view calendar and create links
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");


  $forward = $date1->add(new DateInterval('P3M'));
  $forward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/pricing/' . $forward->format('Y') . '/' . $forward->format('n');
  $forward_link = l(t('Forward'), $forward_path);

  $backward = $date2->sub(new DateInterval('P3M'));
  $backward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/pricing/' . $backward->format('Y') . '/' . $backward->format('n');
  $backward_link = l(t('Back'), $backward_path);
  
  $current_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/pricing/' . $date_current->format('Y') . '/' . $date_current->format('n');
  $current_link = l(t('Current'), $current_path);

  // Send everything for theming
  $output = theme('rooms_pricing', array('name' => $rooms_unit->name,
                                              'type' => $rooms_unit->type,
                                              'update_form' => drupal_get_form('update_unit_pricing_form', $rooms_unit->unit_id),
                                              'start_year' => $year,
                                              'start_month' => $month,
                                              'forward_link' => $forward_link,
                                              'backward_link' => $backward_link,
                                              'current_link' => $current_link)
                 );
  
  return $output;  
}


/**
 * A basic form that allows us to update the state of the calendar
 */
function update_unit_pricing_form($form, &$form_state, $unit_id) {

  $form['rooms_update_pricing'] = array(
    '#type' => 'fieldset',
    '#title' => 'Update Pricing',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#description' => t('Careful this will overwrite any existing pricing info.'),
  );
  
  $form['rooms_update_pricing']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );
  
  $form['rooms_update_pricing']['rooms_date_range'] = array(
    '#title' => t('Date Range'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );
  
  $form['rooms_update_pricing']['rooms_date_range'] += rooms_date_range_fields();
  // Unset a js setting that is not relevant for pricing
  drupal_add_js(array('rooms' => array('roomsBookingStartDay' => 0)), 'setting');
  
  
  $form['rooms_update_pricing']['op'] = array(
    '#title' => t('Operation'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );
  
  $form['rooms_update_pricing']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => 'Operation',
    '#options' => array(
      ROOMS_ADD => 'Add to price',
      ROOMS_SUB => 'Subtract from price',
      ROOMS_REPLACE => 'Replace price',
      ROOMS_INCREASE => 'Increase price by % amount',
      ROOMS_DECREASE => 'Decrease price by % amount',
    ),
    '#default_value' =>  'replace',
  );
  
  $form['rooms_update_pricing']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => 'Amount to apply for rule',
    '#maxlength' => 10,
    '#required' => TRUE,
  );
  
  
  $form['rooms_update_pricing']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );
  
  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['rooms_update_pricing']['#submit'])) {
    $submit += $form['rooms_update_pricing']['#submit'];
  }
  
  $form['rooms_update_pricing']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Room Pricing'),
    '#submit' => $submit + array('update_unit_pricing_form_submit'),
  );
  
  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'update_unit_pricing_form_validate';
  
  
  return $form;
}


function update_unit_pricing_form_validate(&$form, &$form_state) {
  // Check date validity
  $date1 = new DateTime($form_state['values']['rooms_start_date']);
  $date2 = new DateTime($form_state['values']['rooms_end_date']);
  $diff = $date1->diff($date2);
  // If date1 > date2
  if ($diff->invert) {
    form_set_error('date_range', t('End date must be after start date'));
  }
  
  // Make sure amount entered is numeric
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => 'Amount')));
  }
}


function update_unit_pricing_form_submit(&$form, &$form_state) {
  
  $start_date = new DateTime($form_state['values']['rooms_start_date']);
  $end_date = new DateTime($form_state['values']['rooms_end_date']);
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];
  
  $unit_id = $form_state['values']['unit_id'];
  
  // Get all the pricing events for the date range
  $rc = new UnitPricingCalendar($unit_id);
  $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
  $events = array($pe);
  
  $rc->updateCalendar($events);
    
}



/** 
 * Creates the necessary json for the date range provided - needs at least start year and month at which point it will
 * return the entire month.
 */
function rooms_pricing_json($unit, $start_year = '', $start_month = '', $start_day = '', $end_year = '', $end_month = '', $end_day = '') {

  $start_year = (int)$start_year;
  $start_month = (int)$start_month;
  $start_day = (int)$start_day;
  
  $end_year = (int)$end_year;
  $end_month = (int)$end_month;
  $end_day = (int)$end_day;
  
  $eom = rooms_end_of_month_dates($start_year);
    
  if (($start_year == 0) || ($start_month == 0)) {
    echo drupal_json_encode('missing basic info');
    return;
  }
  elseif ($start_day == 0) {
    $start_date = new DateTime("$start_year-$start_month-1");
    $end_day = $eom[$start_month];
    $end_date = new DateTime("$start_year-$start_month-$end_day");
  }
  elseif ($start_day != 0 && $end_year == 0) {
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$start_year-$start_month-15");
    $end_date->add(new DateInterval('P1M'));
    $end_year = $end_date->format('Y');
    $end_month = $end_date->format('n');
    $end_day = $eom[$end_date->format('n')];
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }
  else{
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }

  $rc = new UnitPricingCalendar($unit->unit_id);

  $events = $rc->getEvents($start_date, $end_date);
  $json_events  = array();
  
  foreach ($events as $event) {
    $json_events[] = $event->formatJson();
  }
    
 
  echo drupal_json_encode($json_events);
  
}

 

/**
 * Implement rooms_pricing_theme().
 */
function rooms_pricing_theme() {
  return array(
    'rooms_pricing' => array(
      'template' => 'rooms_pricing'
    )
  );
}
