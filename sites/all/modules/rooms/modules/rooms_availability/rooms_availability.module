<?php

/**
 * @file
 * Manages availability for Bookable Units and displaying dates on the jquery FullCalendar
 * plugin
 */

/**
 * The default path to the FullCalendar plugin.
 */
define('ROOMS_FC_PATH', 'sites/all/libraries/fullcalendar/fullcalendar');

/**
 * The minimum supported version of the FullCalendar plugin.
 */
define('ROOMS_FC_MIN_PLUGIN_VERSION', '1.4.10');

define('ROOMS_AVAILABILITY_ADMIN_STYLE', 1);
define('ROOMS_AVAILABILITY_GENERIC_STYLE', 2);


/**
 * Implements hook_library().
 */
function rooms_availability_library() {
  $libraries['rooms_fullcalendar'] = array(
    'title' => 'Rooms FullCalendar',
    'website' => 'http://arshaw.com/fullcalendar',
    'version' => ROOMS_FC_MIN_PLUGIN_VERSION,
    'js' => array(
      rooms_availability_fullcalendar_get_js_path() => array(),
      variable_get('rooms_fc_path', ROOMS_FC_PATH) . '/gcal.js' => array(),
    ),
    'css' => array(
      variable_get('rooms_fc_path', ROOMS_FC_PATH) . '/fullcalendar.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
      drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'ui.draggable'),
      array('system', 'ui.droppable'),
      array('system', 'ui.resizable'),
      array('system', 'effects.highlight'),
    ),
  );
  return $libraries;
}


/**
 * Implements hook_permission().
 */
function rooms_availability_permission() {
  $permissions = array(
    'manage booking unit availability' => array(
      'title' => t('Manage Booking Unit Availability'),
      'description' => t('Allows users to manage availability settings for Rooms'),
      'restrict access' => TRUE,
    ),
    'view availability information' => array(
      'title' => t('View availability information'),
      'description' => t('Allow users to view availability info (especially via availability reference field)'),
    )
  );
  return $permissions;
}


/**
 * Implements hook_menu().
 */
function rooms_availability_menu() {
  $items = array();
  
  $items['admin/rooms/units/unit/%availability_unit/availability'] = array(
    'title' => 'Manage Availability',
    'page callback' => 'rooms_availability_page',
    'page arguments' => array(4, 6, 7),
    'access callback' => 'rooms_availability_admin_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '20',
  );
  
  $items['rooms/units/unit/%availability_unit/availability/json/%/%'] = array(
    'title' =>  'Availability Event',
    'page callback' => 'rooms_availability_event',
    'page arguments' => array(3, 6, 7, 8, 9, 10, 11, 12),
    'access callback' => 'rooms_availability_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/rooms/units/unit/%availability_unit/event'] = array(
    'title' => 'Event Management',
    'page callback' => 'rooms_availability_event_manager_page',
    'page arguments' => array(4),
    'access callback' => 'rooms_availability_access',
    'access arguments' => array(4),
    'type' => MENU_CALLBACK,
    'weight' => 30,
  );

  $items['admin/rooms/units/bulk_unit_management'] = array(
    'title' => 'Bulk availability management',
    'page callback' => 'rooms_availability_bulk_unit_management',
    'page arguments' => array(4, 5, 6, 7),
    'access callback' => 'rooms_availability_access',
    'access arguments' => array(4),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/rooms/units/bulk_pricing_management'] = array(
    'title' => 'Bulk pricing management',
    'page callback' => 'rooms_availability_bulk_pricing_management',
    'page arguments' => array(4, 5, 6, 7),
    'access callback' => 'rooms_bulk_pricing_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['admin/rooms/select-all-pages-av'] = array(
    'title' => t('AJAX Select all availability pages callback'),
    'type' => MENU_CALLBACK,
    'page callback' => 'rooms_availability_av_ajax_callback',
    'access arguments' => array('view availability information'),
  );

  $items['admin/rooms/select-all-pages-pr'] = array(
    'title' => t('AJAX Select all pricing pages callback'),
    'type' => MENU_CALLBACK,
    'page callback' => 'rooms_availability_pr_ajax_callback',
    'access arguments' => array('manage booking unit pricing'),
  );

  return $items;
}


function rooms_availability_av_ajax_callback() {
  if ($_POST['select-all'] == '1') {
    variable_set('ROOMS_SELECT_ALL_PAGES_AV', 'true');
  }
  else {
    variable_set('ROOMS_SELECT_ALL_PAGES_AV', 'false');
  }
}

function rooms_availability_pr_ajax_callback() {
  if ($_POST['select-all'] == '1') {
    variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'true');
  }
  else {
    variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'false');
  }
}


function rooms_availability_bulk_unit_management($year='', $month='', $type='all', $page='0', $action='', $start='', $end='') {
  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;
  $type = ($type == '') ? 'all' : $type;

  if ($page < 0) $page = 0;

  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/rooms_availability.css');
  drupal_add_library('rooms_availability', 'rooms_fullcalendar');
  drupal_add_js(drupal_get_path('module', 'rooms_availability') . '/js/rooms_unit_management.js');

  $query = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
  $query2 = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
  if ($type != 'all') {
    $query->condition('type', $type , '=');
    $query2->condition('type', $type , '=');
  }
  $query->range($page * 20, 20);
  $rooms_units = $query->execute()->fetchAll();

  $n_total_row = $query2->countQuery()->execute()->fetchField();

  // Inject settings in javascript that we will use
  drupal_add_js(array('roomsUnitManagement' => array('roomsNumber' => count($rooms_units))), 'setting');
  drupal_add_js(array('roomsUnitManagement' => array('currentMonth' => $month)), 'setting');
  drupal_add_js(array('roomsUnitManagement' => array('currentYear' => $year)), 'setting');

  $output = render(drupal_get_form('rooms_availability_filter_month_form', $month, $year));

  $output .= render(drupal_get_form('rooms_availability_update_status_form', $month, $year, $type, $rooms_units));

  $rooms_id = array();
  foreach ($rooms_units as $value) {
    $rooms_id[] = $value->unit_id;
  }

  if ($n_total_row / 20 > 1) {
    $output .= '<div class="item-list"><ul class="pager">';
    if ($page != 0) {
      $output .= '<li class="pager-first first"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/0">« first</a></li>';
      $output .= '<li class="pager-previous"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($page - 1) . '">‹ previous</a></li>';
    }
    for ($i = 0; $i < $n_total_row / 20; $i++) {
      if ($i == $page) {
        $output .= '<li class="pager-current">' . ($page + 1) . '</li>';
      }
      else {
        $output .= '<li class="pager-item"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . $i . '">' . ($i + 1) . '</a></li>';
      }
    }
    if ($page + 1 < $n_total_row / 20) {
      $output .= '<li class="pager-next"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($page + 1) . '">next ›</a></li>';
      $output .= '<li class="pager-last last"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($n_total_row / 20 - 1) . '">last »</a></li>';
    }
    $output .= '</ul></div>';
  }

  drupal_add_js(array('roomsUnitManagement' => array('roomsId' => $rooms_id)), 'setting');

  return $output;
}


function rooms_availability_bulk_pricing_management($year='', $month='', $type='all', $page='0', $action='', $start='', $end='') {
  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;
  $type = ($type == '') ? 'all' : $type;

  if ($page < 0) $page = 0;

  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/rooms_availability.css');
  drupal_add_library('rooms_availability', 'rooms_fullcalendar');
  drupal_add_js(drupal_get_path('module', 'rooms_availability') . '/js/rooms_pricing_management.js');

  $query = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
  $query2 = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
  if ($type != 'all') {
    $query->condition('type', $type , '=');
    $query2->condition('type', $type , '=');
  }
  $query->range($page * 20, 20);
  $rooms_units = $query->execute()->fetchAll();

  $n_total_row = $query2->countQuery()->execute()->fetchField();

  // Inject settings in javascript that we will use
  drupal_add_js(array('roomsUnitManagement' => array('roomsNumber' => count($rooms_units))), 'setting');
  drupal_add_js(array('roomsUnitManagement' => array('currentMonth' => $month)), 'setting');
  drupal_add_js(array('roomsUnitManagement' => array('currentYear' => $year)), 'setting');

  $output = render(drupal_get_form('rooms_availability_filter_month_form', $month, $year));

  $output .= render(drupal_get_form('rooms_availability_pricing_update_form', $month, $year, $type ,$rooms_units));

  $rooms_id = array();
  foreach ($rooms_units as $value) {
    $rooms_id[] = $value->unit_id;
  }

  if ($n_total_row / 20 > 1) {
    $output .= '<div class="item-list"><ul class="pager">';
    if ($page != 0) {
      $output .= '<li class="pager-first first"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/0">« first</a></li>';
      $output .= '<li class="pager-previous"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($page - 1) . '">‹ previous</a></li>';
    }
    for ($i = 0; $i < $n_total_row / 20; $i++) {
      if ($i == $page) {
        $output .= '<li class="pager-current">' . ($page + 1) . '</li>';
      }
      else {
        $output .= '<li class="pager-item"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . $i . '">' . ($i + 1) . '</a></li>';
      }
    }
    if ($page + 1 < $n_total_row / 20) {
      $output .= '<li class="pager-next"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($page + 1) . '">next ›</a></li>';
      $output .= '<li class="pager-last last"><a href="http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/bulk_unit_management/' . $year . '/' . $month . '/' . $type. '/' . ($n_total_row / 20 - 1) . '">last »</a></li>';
    }
    $output .= '</ul></div>';
  }

  drupal_add_js(array('roomsUnitManagement' => array('roomsId' => $rooms_id)), 'setting');

  return $output;
}


function rooms_availability_filter_month_form($form, &$form_state, $month, $year) {
  $month_options = array(
    1 => 'January',
    2 => 'February',
    3 => 'March',
    4 => 'April',
    5 => 'May',
    6 => 'June',
    7 => 'July',
    8 => 'August',
    9 => 'September',
    10 => 'October',
    11 => 'November',
    12 => 'December',
  );

  $form['rooms_availability_filter_month']['month'] = array(
    '#title' => t("Month"),
    '#type' => 'select',
    '#options' => $month_options,
    '#default_value' => $month,
  );

  $year_options = range(date('Y', time()) - 2, date('Y', time()) + 5);

  $form['rooms_availability_filter_month']['year'] = array(
    '#title' => t("Year"),
    '#type' => 'select',
    '#options' => $year_options,
    '#default_value' => $year-2010,
  );

  $query = db_select('rooms_unit_type', 'n')->fields('n', array('type', 'label'));
  $unit_type = $query->execute()->fetchAll();

  $type_options['all'] = 'All types';
  foreach ($unit_type as $unit) {
    $type_options[$unit->type] = $unit->label;
  }

  $form['rooms_availability_filter_month']['type'] = array(
    '#title' => t("Type"),
    '#type' => 'select',
    '#options' => $type_options,
    '#default_value' => (arg(6) == '') ? 'all' : arg(6),
  );

  $form['rooms_availability_filter_month']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['rooms_availability_filter_month']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
  );

  hide($form['rooms_availability_filter_month']['actions']['submit']);

  return $form;
}


function rooms_availability_filter_month_form_submit(&$form, &$form_state) {
  if (arg(3) == 'bulk_pricing_management') {
    variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'false');
  }
  elseif (arg(3) == 'bulk_unit_management') {
    variable_set('ROOMS_SELECT_ALL_PAGES_AV', 'false');
  }

  $year = $form_state['values']['year'] + 2010;
  $month = $form_state['values']['month'];
  $type = $form_state['values']['type'];

  $address = 'http://' . $_SERVER['HTTP_HOST'] . '/admin/rooms/units/' . arg(3) . '/' . $year . '/' . $month;
  if ($type != 'all') {
    $address .= '/' . $type;
  }

  if (arg(7) != '') {
    if ($type == 'all') $address .= '/all/' . arg(7);
    else $address .= $type . arg(7);
  }

  drupal_goto($address);
}


function rooms_availability_pricing_update_form($form, &$form_state, $month, $year, $type, $rooms_units) {
    $form['rooms_pricing_update'] = array(
    '#type' => 'fieldset',
    '#title' => 'Update Pricing',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rooms_pricing_update']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['rooms_pricing_update']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['rooms_pricing_update']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['rooms_pricing_update']['rooms_date_range'] = rooms_availability_date_range_fields($year, $month);
  
  $form['rooms_pricing_update']['op'] = array(
    '#title' => t('Operation'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['rooms_pricing_update']['op']['operation'] = array(
    '#type' => 'select',
    '#title' => 'Operation',
    '#options' => array(
      ROOMS_ADD => 'Add to price',
      ROOMS_SUB => 'Subtract from price',
      ROOMS_REPLACE => 'Replace price',
      ROOMS_INCREASE => 'Increase price by % amount',
      ROOMS_DECREASE => 'Decrease price by % amount',
    ),
    '#default_value' =>  'replace',
  );

  $form['rooms_pricing_update']['op']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => '',
    '#size' => '5',
    '#description' => 'Amount to apply for rule',
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['rooms_pricing_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['rooms_pricing_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Room Pricing'),
  );

  $form['#validate'][] = 'rooms_availability_pricing_update_form_validate';

  $form['rooms_data'] = array (
    '#prefix' => '<table>',
    '#type' => 'container',
    '#suffix' => '</table>',
  );

  if (count($rooms_units) > 0) {
    $form['rooms_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<tr><td>',
      '#options' => array ('Select...', 'All (this page)', 'All (all pages)', 'None'),
      '#suffix' => '</td><td></td></tr>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
      $form['rooms_data']['select-all']['#default_value'] = '2';
    }
  }

  foreach ($rooms_units as $key => $value) {
    $form['rooms_data']['rooms-'.$value->unit_id] = array (
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><td>',
      '#suffix' => '</td><td><div id="calendar' . $key . '"></div></td></tr>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
      $form['rooms_data']['rooms-'.$value->unit_id]['#default_value'] = '1';
    }
  }

  return $form;
}


function rooms_availability_pricing_update_form_validate(&$form, &$form_state) {
  // Check date validity
  if ($form_state['values']['rooms_start_date']['date'] == '') {
    return;
  }
  if ($form_state['values']['rooms_end_date']['date'] == '') {
    return;
  }

  // Make sure amount entered is numeric
  if (!empty($form_state['values']['amount']) && !is_numeric($form_state['values']['amount'])) {
    form_set_error('amount', t('%name: you must enter a numeric value for the price.', array('%name' => 'Amount')));
  }

  $date1 = new DateTime($form_state['values']['rooms_start_date']);
  $date2 = new DateTime($form_state['values']['rooms_end_date']);
  $diff = $date1->diff($date2);
  // If date1 > date2
  if ($diff->invert) {
    form_set_error('date_range', t('End date must be after start date'));
  }
  $curr_month = $form_state['values']['curr_month'];
  $curr_year = $form_state['values']['curr_year'];
  if ($date1->format('n') != $curr_month || $date2->format('n') != $curr_month
      || $date1->format('Y') != $curr_year || $date2->format('Y') != $curr_year) {
    form_set_error('date_range', t('End date and start date are out of current month'));
  }
}


function rooms_availability_pricing_update_form_submit(&$form, &$form_state) {
  $start_date = new DateTime($form_state['values']['rooms_start_date']);
  $end_date = new DateTime($form_state['values']['rooms_end_date']);
  $type = $form_state['values']['curr_type'];
  $operation = $form_state['values']['operation'];
  $amount = $form_state['values']['amount'];

  if (variable_get('ROOMS_SELECT_ALL_PAGES_PR') == 'true') {
    $query = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type , '=');
    }
    $rooms_units = $query->execute()->fetchAll();

    foreach ($rooms_units as $room) {
      $unit_id = $room->unit_id ;

      // Get all the pricing events for the date range
      $rc = new UnitPricingCalendar($unit_id);
      $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
      $events = array($pe);

      $rc->updateCalendar($events);
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'rooms-') === 0 && $value == '1') {
        $unit_id = str_replace('rooms-', '', $key);

        // Get all the pricing events for the date range
        $rc = new UnitPricingCalendar($unit_id);
        $pe = new PricingEvent($unit_id, $amount, $start_date, $end_date, $operation);
        $events = array($pe);

        $rc->updateCalendar($events);
      }
    }
  }

  variable_set('ROOMS_SELECT_ALL_PAGES_PR', 'false');
}


function rooms_availability_update_status_form($form, &$form_state, $month, $year, $type, $rooms_units) {
  $form['rooms_availability_update'] = array(
    '#type' => 'fieldset',
    '#title' => 'Update Availability',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['rooms_update_availability']['curr_month'] = array(
    '#type' => 'hidden',
    '#value' => $month,
  );

  $form['rooms_update_availability']['curr_year'] = array(
    '#type' => 'hidden',
    '#value' => $year,
  );

  $form['rooms_update_availability']['curr_type'] = array(
    '#type' => 'hidden',
    '#value' => $type,
  );

  $form['rooms_availability_update']['rooms_date_range'] = rooms_availability_date_range_fields($year, $month);
  
  $state_options = array(
    '-1' => 'Choose a new status',
    ROOMS_NOT_AVAILABLE => 'Unavailable',
    ROOMS_AVAILABLE => 'Available',
    ROOMS_ON_REQUEST => 'On Request',
    ROOMS_ANON_BOOKED => 'Anonymous Booking',
  );
  
  $form['rooms_availability_update']['change_event_status'] = array(
    '#title' => t("Bookable Unit State"),
    '#type' => 'select',
    '#options' => $state_options,
    '#description' => t('Choose what state to put the unit in for the dates chosen above'),
  );

  $form['rooms_availability_update']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );

  $form['rooms_availability_update']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Room Availability'),
  );

  $form['#validate'][] = 'rooms_availability_update_status_form_validate';

  $form['rooms_data'] = array (
    '#prefix' => '<table>',
    '#type' => 'container',
    '#suffix' => '</table>',
  );

  if (count($rooms_units) > 0) {
    $form['rooms_data']['select-all'] = array(
      '#type' => 'select',
      '#prefix' => '<tr><td>',
      '#options' => array ('Select...', 'All (this page)', 'All (all pages)', 'None'),
      '#suffix' => '</td><td></td></tr>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_AV') == 'true') {
      $form['rooms_data']['select-all']['#default_value'] = '2';
    }
  }

  foreach ($rooms_units as $key => $value) {
    $form['rooms_data']['rooms-'.$value->unit_id] = array (
      '#type' => 'checkbox',
      '#title' => $value->name,
      '#prefix' => '<tr><td>',
      '#suffix' => '</td><td><div id="calendar' . $key . '"></div></td></tr>',
    );

    if (variable_get('ROOMS_SELECT_ALL_PAGES_AV') == 'true') {
      $form['rooms_data']['rooms-'.$value->unit_id]['#default_value'] = '1';
    }
  }

  return $form;
}


function rooms_availability_update_status_form_validate(&$form, &$form_state) {
  // Check date validity
  if ($form_state['values']['rooms_start_date']['date'] == '') {
    return;
  }
  if ($form_state['values']['rooms_end_date']['date'] == '') {
    return;
  }
  if ($form_state['values']['change_event_status'] == -1) {
    form_set_error('change_event_status', t('Select a valid status'));
  }
  $date1 = new DateTime($form_state['values']['rooms_start_date']);
  $date2 = new DateTime($form_state['values']['rooms_end_date']);
  $diff = $date1->diff($date2);
  // If date1 > date2
  if ($diff->invert) {
    form_set_error('date_range', t('End date must be after start date'));
  }
  $curr_month = $form_state['values']['curr_month'];
  $curr_year = $form_state['values']['curr_year'];
  if ($date1->format('n') != $curr_month || $date2->format('n') != $curr_month
      || $date1->format('Y') != $curr_year || $date2->format('Y') != $curr_year) {
    form_set_error('date_range', t('End date and start date are out of current month'));
  }
}


function rooms_availability_update_status_form_submit(&$form, &$form_state) {
  $start_date = new DateTime($form_state['values']['rooms_start_date']);
  $end_date = new DateTime($form_state['values']['rooms_end_date']);
  $type = $form_state['values']['curr_type'];
  $event_id = $form_state['values']['change_event_status'];

  if (variable_get('ROOMS_SELECT_ALL_PAGES_AV') == 'true') {
    $query = db_select('rooms_units', 'n')->fields('n', array('unit_id', 'name'));
    if ($type != 'all') {
      $query->condition('type', $type , '=');
    }
    $rooms_units = $query->execute()->fetchAll();

    foreach ($rooms_units as $room) {
      $unit_id = $room->unit_id ;

      // Create a new Booking Event
      $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
      $events = array($be);
      $rc = new UnitCalendar($unit_id);
      $response = $rc->updateCalendar($events);
      if ($response[$event_id] == ROOMS_BLOCKED) {
        drupal_set_message(t($room->name . ' - Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period'));
      }
      elseif ($response[$event_id] == ROOMS_UPDATED) {
        drupal_set_message(t($room->name . ' - Calendar Updated'));
      }
    }
  }
  else {
    foreach ($form_state['values'] as $key => $value) {
      if (strpos($key, 'rooms-') === 0 && $value == '1') {
        $unit_id = str_replace('rooms-', '', $key);

        // Create a new Booking Event
        $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
        $events = array($be);
        $rc = new UnitCalendar($unit_id);
        $response = $rc->updateCalendar($events);
        if ($response[$event_id] == ROOMS_BLOCKED) {
          drupal_set_message(t($form_state['complete form']['rooms_data'][$key]['#title'] . ' - Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period'));
        }
        elseif ($response[$event_id] == ROOMS_UPDATED) {
          drupal_set_message(t($form_state['complete form']['rooms_data'][$key]['#title'] . ' - Calendar Updated'));
        }
      }
    }
  }

  variable_set('ROOMS_SELECT_ALL_PAGES_AV', 'false');
}


/**
 * Menu load for units - calls the actuall rooms_unit_load implemented in rooms_unit.module
 */
function availability_unit_load($unit_id) {
  $unit = rooms_unit_load($unit_id);
  return $unit;
}



/**
 * Room availability admin access callback
 * @todo check unauthorised access for calendar js
 */ 
function rooms_availability_admin_access($rooms_unit) {
  if (user_access('manage booking unit availability')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Room availability access callback
 */ 
function rooms_availability_access($rooms_unit) {
  if (user_access('view availability information')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Room availability access callback
 */ 
function rooms_bulk_pricing_access() {
  if (user_access('manage booking unit pricing')) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Callback for admin/rooms/units/unit/%unit/availability - builds availability
 * page by adding calendar and pulling events from availability table.
 * 
 */
function rooms_availability_page(RoomsUnit $rooms_unit, $year='', $month='') {

  // Basic check to avoid any uggliness
  $year = check_plain($year);
  $month = check_plain($month);
  
  // If year is not set then give it the current date
  $year = ($year == '') ? date('Y', time()) : $year;
  $month = ($month == '') ? date('n', time()) : $month;

  // Add all the stuff we will need to show the FullCalendar  
  drupal_add_library('rooms_availability', 'rooms_fullcalendar');
  drupal_add_js(drupal_get_path('module', 'rooms_availability') . '/js/rooms_availability.js');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/fullcalendar.theme.css');
  drupal_add_css(drupal_get_path('module', 'rooms_availability') . '/css/rooms_availability.css');
  
  // Inject settings in javascript that we will use
  drupal_add_js(array('roomsAvailability' => array('roomID' => $rooms_unit->unit_id)), 'setting');
  drupal_add_js(array('roomsAvailability' => array('currentMonth' => $month)), 'setting');
  drupal_add_js(array('roomsAvailability' => array('currentYear' => $year)), 'setting');
  

  // Calculate forward and back dates for our 3-month view calendar and create links
  $date1 = new DateTime("$year-$month-1");
  $date2 = new DateTime("$year-$month-1");
  $date_current = new DateTime("now");


  $forward = $date1->add(new DateInterval('P3M'));
  $forward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $forward->format('Y') . '/' . $forward->format('n');
  $forward_link = l(t('Forward'), $forward_path);

  $backward = $date2->sub(new DateInterval('P3M'));
  $backward_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $backward->format('Y') . '/' . $backward->format('n');
  $backward_link = l(t('Back'), $backward_path);
  
  $current_path = 'admin/rooms/units/unit/' . $rooms_unit->unit_id . '/availability/' . $date_current->format('Y') . '/' . $date_current->format('n');
  $current_link = l(t('Current'), $current_path);
  
  // The content to theme
  $content = array();

  $content['title'] = array(
    '#prefix' => '<div class="availability-title">',
    '#markup' => '<h2>' . t('@name Availability View', array('@name' => $rooms_unit->name)) . '</h2>',
    '#suffix' => '</div>'
  );
  $content['room_name'] = $rooms_unit->name;
  $content['type'] = $rooms_unit->type;
  $content['update_form'] = drupal_get_form('update_availability_calendar_form', $rooms_unit->unit_id, $year, $month);
  $content['start_year'] = $year;
  $content['start_month'] = $month;
  $content['forward_link'] = $forward_link;
  $content['backward_link'] = $backward_link;
  $content['current_link'] = $current_link;

  $content['update_form_into'] = array(
    '#prefix' => '<div class="availability-update">',
    '#markup' => '<h2>' . t('Update Room Availability') . '</h2>',
    '#suffix' => '</div>'
  );
  
  // Send everything for theming
  $output = theme('rooms_availability', $content);

  return $output;
}


/**
 * A basic form that allows us to update the state of the calendar
 */
function update_availability_calendar_form($form, &$form_state, $unit_id, $year, $month) {
  
  $form['rooms_update_availability'] = array(
    '#type' => 'fieldset',
    '#title' => 'Update Availability',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $form['rooms_update_availability']['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );
  
  $form['rooms_update_availability']['rooms_date_range'] = rooms_date_range_fields();
  // Unset a js setting
  drupal_add_js(array('rooms' => array('roomsBookingStartDay' => 0)), 'setting');
  
  $form['rooms_update_availability']['unit_state'] = array(
    '#type' => 'select',
    '#title' => t('Bookable Unit State'),
    '#options' => array(
      ROOMS_NOT_AVAILABLE => 'Unavailable',
      ROOMS_AVAILABLE => 'Available',
      ROOMS_ON_REQUEST => 'Available on Request',
      ROOMS_ANON_BOOKED => 'Anonymous Booking'
    ),
    '#description' => t('Choose what state to put the unit in for the dates chosen above'),
  );
  
  $form['rooms_update_availability']['actions'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('form-actions')),
    '#weight' => 400,
  );
  
  // We add the form's #submit array to this button along with the actual submit
  // handler to preserve any submit handlers added by a form callback_wrapper.
  $submit = array();

  if (!empty($form['rooms_update_availability']['#submit'])) {
    $submit += $form['rooms_update_availability']['#submit'];
  }
  
  $form['rooms_update_availability']['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Room Availability'),
    '#submit' => $submit + array('update_availability_calendar_form_submit'),
  );
  
  // We append the validate handler to #validate in case a form callback_wrapper
  // is used to add validate handlers earlier.
  $form['#validate'][] = 'update_availability_calendar_form_validate';
  
  
  return $form;
}


function update_availability_calendar_form_validate(&$form, &$form_state) {
  // Check date validity
  if ($form_state['values']['rooms_start_date']['date'] == '') {
    return;
  }
  if ($form_state['values']['rooms_end_date']['date'] == '') {
    return;
  }
  $date1 = new DateTime($form_state['values']['rooms_start_date']);
  $date2 = new DateTime($form_state['values']['rooms_end_date']);
  $diff = $date1->diff($date2);
  // If date1 > date2
  if ($diff->invert) {
    form_set_error('date_range', t('End date must be after start date'));
  }
}


/**
 *@todo Need to figure out what to do when we cancel an existing booking
 */

function update_availability_calendar_form_submit(&$form, &$form_state) {
  
  $start_date = new DateTime($form_state['values']['rooms_start_date']);
  $end_date = new DateTime($form_state['values']['rooms_end_date']);
  $event_id = $form_state['values']['unit_state'];
  
  $unit_id = $form_state['values']['unit_id'];
  
  // Create a new Booking Event
  $be = new BookingEvent($unit_id, $event_id, $start_date, $end_date);
  $events = array($be);
  $rc = new UnitCalendar($unit_id);
  $response = $rc->updateCalendar($events);
  if ($response[$event_id] == ROOMS_BLOCKED) {
    drupal_set_message(t('Could not update calendar because a locked event is blocking the update - you need to unlock any locked events in that period'));
  }
  elseif ($response[$event_id] == ROOMS_UPDATED) {
    drupal_set_message(t('Calendar Updated'));
  }
}



/** 
 * Creates the necessary json for the date range provided - needs at least start year and month at which point it will
 * return the entire month.
 */
function rooms_availability_event($unit, $start_year = '', $start_month = '', $start_day = '', $end_year = '', $end_month = '', $end_day = '', $event_style = ROOMS_AVAILABILITY_ADMIN_STYLE) {
  $start_year = (int)$start_year;
  $start_month = (int)$start_month;
  $start_day = (int)$start_day;
  
  $end_year = (int)$end_year;
  $end_month = (int)$end_month;
  $end_day = (int)$end_day;
  
  $event_style = (int)$event_style;
  
  $eom = rooms_end_of_month_dates($start_year);
    
  if (($start_year == 0) || ($start_month == 0)) {
    echo drupal_json_encode('missing basic info');
    return;
  }
  elseif ($start_day == 0) {
    $start_date = new DateTime("$start_year-$start_month-1");
    $end_day = $eom[$start_month];
    $end_date = new DateTime("$start_year-$start_month-$end_day");
  }
  elseif ($start_day != 0 && $end_year == 0) {
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$start_year-$start_month-15");
    $end_date->add(new DateInterval('P1M'));
    $end_year = $end_date->format('Y');
    $end_month = $end_date->format('n');
    $end_day = $eom[$end_date->format('n')];
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }
  else{
    $start_date = new DateTime("$start_year-$start_month-$start_day");
    $end_date = new DateTime("$end_year-$end_month-$end_day");
  }

  $rc = new UnitCalendar($unit->unit_id, $unit->default_state);

  $events = $rc->getEvents($start_date, $end_date);
  $json_events  = array();
  
  foreach ($events as $event) {
    $json_events[] = $event->formatJson($event_style);
  }
 
  echo drupal_json_encode($json_events);
  
}


/**
 * The EventManager page shows when clicking on an event in the availability calendar - will allow a user to manipulate
 * that event.
 */
function rooms_availability_event_manager_page($unit, $event_id = NULL, $start_date = 0, $end_date = 0) {
  
  // If any info missing we cannot load the event
  if ($event_id == NULL || $start_date == 0 || $end_date == 0) {
    return 'Unable to load event';
  }
    
  $state_options = array(
    ROOMS_NOT_AVAILABLE => 'Unavailable',
    ROOMS_AVAILABLE => 'Available',
    ROOMS_ON_REQUEST => 'On Request',
    ROOMS_ANON_BOOKED => 'Anonymous Booking',
  );
  
  // Basic check to avoid damage from dirty input
  $event_id = check_plain($event_id);
  $start_date = check_plain($start_date);
  $end_date = check_plain($end_date);

  $booked = FALSE;
  if ($event_id > 10) {
    $booked = TRUE;
  }
  
  $sd = new DateTime();
  $sd->setTimezone(new DateTimeZone('UTC'))->setTimestamp($start_date);
  
  $ed = new DateTime();
  $ed->setTimezone(new DateTimeZone('UTC'))->setTimestamp($end_date);

  if (!$booked) {
    $content['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => t('@room is @status', array('@room' => $unit->name, '@status' => $state_options[$event_id])),
      '#suffix' => '</h2>'
    );
  }
  else {
    $booking_id = rooms_availability_return_id($event_id);
    $booking = rooms_booking_load($booking_id);
    $output = t('@room is booked for @client', array('@room' => $unit->name, '@client' => $booking->name));
    $output .= '<br/>';
    $booking_path = 'admin/rooms/bookings/booking/' . $booking->booking_id . '/edit';
    $booking_link = l(t('Edit Booking'), $booking_path);
    $output .= $booking_link;

    $content['event_title'] = array(
      '#prefix' => '<h2>',
      '#markup' => $output,
      '#suffix' => '</h2>'
    );
  }
  $date_format = variable_get('rooms_date_format', 'd-m-Y');
  $content['event_details'] = array(
    '#prefix' => '<div class="event-details">',
    '#markup' => t('Duration: @startdate to @enddate', array('@startdate' => $sd->format($date_format), '@enddate' => $ed->format($date_format))),
    '#suffix' => '</div>'
  );
  
  if (!$booked) {
    $content['event_manager_form'] = drupal_get_form('rooms_availability_event_manager_form', $unit->unit_id, $event_id, $start_date, $end_date);
  }
  
  $output = theme('rooms_event', $content);
  
  return $output;
}


/**
 * The Event Manager Form - will eventually change based on the type of event we are manipulating
 */
function rooms_availability_event_manager_form($form, $form_state, $unit_id, $event_id, $start_date, $end_date) {
  $form = array();
  
  $form['form_wrapper_top'] = array(
    '#type' => 'item',
    '#markup' => '',
    '#prefix' => '<div id="replace_textfield_div">',
  );

  
  $form['unit_id'] = array(
    '#type' => 'hidden',
    '#value' => $unit_id,
  );

  $form['event_id'] = array(
    '#type' => 'hidden',
    '#value' => $event_id,
  );
  
  $form['start_date'] = array(
    '#type' => 'hidden',
    '#value' => $start_date,
  );
  
  $form['end_date'] = array(
    '#type' => 'hidden',
    '#value' => $end_date,
  );
  
  $state_options = array(
    '-1' => 'Choose a new status',
    ROOMS_NOT_AVAILABLE => 'Unavailable',
    ROOMS_AVAILABLE => 'Available',
    ROOMS_ON_REQUEST => 'On Request',
    ROOMS_ANON_BOOKED => 'Anonymous Booking',
  );
  
  unset($state_options[$event_id]);
  
  $form['change_event_status'] = array(
    '#title' => t("Change the state for this event to:") . ' ',
    '#type' => 'select',
    '#options' => $state_options,
    '#default_value' => $event_id,
    '#ajax' => array(
      'callback' => 'rooms_availability_ajax_event_status_change',
      'wrapper' => 'replace_textfield_div',
     ),
  );

  // This entire form element will be replaced whenever 'changethis' is updated.
  $form['form_wrapper_bottom'] = array(
    '#type' => 'item',
    '#markup' => '',
    '#suffix' => '</div>',
  );

  return $form;

}

/**
 * The callback for the change_event_status widget of the event manager form
 */
function rooms_availability_ajax_event_status_change($form, $form_state) {
  
  $unit_id = $form_state['values']['unit_id'];
  $event_id = $form_state['values']['event_id'];
  $start_time = $form_state['values']['start_date'];
  $end_time = $form_state['values']['end_date'];
  
  $new_event_id = $form_state['values']['change_event_status'];
  
  // If we have a new event id go ahead and update event
  if (($event_id != $new_event_id) && $new_event_id != -1) {
    
    $start_date = new DateTime();
    $start_date->setTimestamp($start_time);
    
    $end_date = new DateTime();
    $end_date->setTimestamp($end_time);  
    
    $event = new BookingEvent($unit_id, $new_event_id, $start_date, $end_date);
    $uc = new UnitCalendar($unit_id);
    $responses = $uc->updateCalendar(array($event));
    
    $form['form_wrapper_bottom']['#markup'] = 'Original Event id is:' . $event_id . ' New Event id is:' . $new_event_id;
    
  }
  
  return $form;
}


/**
 * Implement hook_theme().
 */
function rooms_availability_theme() {
  return array(
    'rooms_availability' => array(
      'template' => 'rooms_availability'
    ),
    'rooms_event' => array(
      'template' => 'rooms_event'
    )

  );
}

/**
 * Sets event ids
 *
 * @todo - Make this depend on a paramenter
 */
function rooms_availability_assign_id($id, $status) {
  // Add eleven for now - this allows for 10 states that do not
  // refer to a specific booking
  $id = $id + 11;

  if ($status == '0') {
    return -($id);
  }
  else {
    return $id;
  }
}


/**
 * Given an event state it returns the valid booking id
 */
function rooms_availability_return_id($id) {
  // Make sure we are not looking for negative ids;
  $id = abs($id);
  
  $id = $id - 11;
  
  return $id;
}

/**
 * Returns the path to the FullCalendar plugin.
 */
function rooms_availability_fullcalendar_get_js_path() {
  //$fullcalendar_file = array('none' => 'fullcalendar.js', 'min' => 'fullcalendar.min.js');
  $fullcalendar_file = array('none' => 'fullcalendar.js', 'min' => 'fullcalendar.min.js');
  return variable_get('rooms_ROOMS_FC_PATH', ROOMS_FC_PATH) . '/' . $fullcalendar_file[variable_get('rooms_fullcalendar_compression_type', 'min')];
}

/**
 * Implementation of hook_form_alter()
 */
function rooms_availability_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'rooms_booking_settings') {
    $form['color_statuses'] = array(
      '#type' => 'fieldset',
      '#title' => t('Calendar Color Codes'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    $form['color_statuses']['rooms_not_available_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Room no available'),
      '#size' => 10,
      '#maxlength' => 7,
      '#default_value' => variable_get('rooms_not_available_color', '#FF0000'),
      '#element_validate' => array('rooms_availability_validate_hex_color'), 
      '#dependency' => array('edit-row-options-colors-legend' => array('type')), 
      '#prefix' => '<div class="rooms-colorpicker-wrapper">', 
      '#suffix' => '<div class="rooms-colorpicker"></div></div>', 
      '#attributes' => array('class' => array('rooms-edit-colorpicker')), 
      '#attached' => array(
        // Add Farbtastic color picker.
        'library' => array(
          array('system', 'farbtastic'),
        ),
        // Add javascript to trigger the colorpicker. 
        'js' => array(drupal_get_path('module', 'rooms_availability') . '/js/rooms_color.js'),
      ),
    );

    $form['color_statuses']['rooms_available_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Room Available'),
      '#size' => 10,
      '#maxlength' => 7,
      '#default_value' => variable_get('rooms_available_color', '#8CBF62'),
      '#element_validate' => array('rooms_availability_validate_hex_color'), 
      '#dependency' => array('edit-row-options-colors-legend' => array('type')), 
      '#prefix' => '<div class="rooms-colorpicker-wrapper">', 
      '#suffix' => '<div class="rooms-colorpicker"></div></div>', 
      '#attributes' => array('class' => array('rooms-edit-colorpicker')), 
      '#attached' => array(
        // Add Farbtastic color picker.
        'library' => array(
          array('system', 'farbtastic'),
        ),
        // Add javascript to trigger the colorpicker. 
        'js' => array(drupal_get_path('module', 'rooms_availability') . '/js/rooms_color.js'),
      ),
    );

    $form['color_statuses']['rooms_on_request_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Room available on request'),
      '#size' => 10,
      '#maxlength' => 7,
      '#default_value' => variable_get('rooms_on_request_color', '#C5C5C5'),
      '#element_validate' => array('rooms_availability_validate_hex_color'), 
      '#dependency' => array('edit-row-options-colors-legend' => array('type')), 
      '#prefix' => '<div class="rooms-colorpicker-wrapper">', 
      '#suffix' => '<div class="rooms-colorpicker"></div></div>', 
      '#attributes' => array('class' => array('rooms-edit-colorpicker')), 
      '#attached' => array(
        // Add Farbtastic color picker.
        'library' => array(
          array('system', 'farbtastic'),
        ),
        // Add javascript to trigger the colorpicker. 
        'js' => array(drupal_get_path('module', 'rooms_availability') . '/js/rooms_color.js'),
      ),
    );

    $form['color_statuses']['rooms_anon_booking_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Anonymous booking'),
      '#size' => 10,
      '#maxlength' => 7,
      '#default_value' => variable_get('rooms_anon_booking_color', '#481600'),
      '#element_validate' => array('rooms_availability_validate_hex_color'), 
      '#dependency' => array('edit-row-options-colors-legend' => array('type')), 
      '#prefix' => '<div class="rooms-colorpicker-wrapper">', 
      '#suffix' => '<div class="rooms-colorpicker"></div></div>', 
      '#attributes' => array('class' => array('rooms-edit-colorpicker')), 
      '#attached' => array(
        // Add Farbtastic color picker.
        'library' => array(
          array('system', 'farbtastic'),
        ),
        // Add javascript to trigger the colorpicker. 
        'js' => array(drupal_get_path('module', 'rooms_availability') . '/js/rooms_color.js'),
      ),
    );

    $form['color_statuses']['rooms_unconfirmed_booking_color'] = array(
      '#type' => 'textfield',
      '#title' => t('Unconfirmed booking'),
      '#size' => 10,
      '#maxlength' => 7,
      '#default_value' => variable_get('rooms_unconfirmed_booking_color', '#481600'),
      '#element_validate' => array('rooms_availability_validate_hex_color'), 
      '#dependency' => array('edit-row-options-colors-legend' => array('type')), 
      '#prefix' => '<div class="rooms-colorpicker-wrapper">', 
      '#suffix' => '<div class="rooms-colorpicker"></div></div>', 
      '#attributes' => array('class' => array('rooms-edit-colorpicker')), 
      '#attached' => array(
        // Add Farbtastic color picker.
        'library' => array(
          array('system', 'farbtastic'),
        ),
        // Add javascript to trigger the colorpicker. 
        'js' => array(drupal_get_path('module', 'rooms_availability') . '/js/rooms_color.js'),
      ),
    );


  }
}


/**
 * Utility function to validate hex color numbers
 */
function rooms_availability_validate_hex_color($element, &$form_state) {
  if(!preg_match('/^#[a-f0-9]{6}$/i', $element['#value'])) {
    form_error($element, 'This is not a valid hexadecimal color!');
  }
}


/**
 * Implements hook_colorbox_settings_alter
 *
 * @todo Figure out if this is the right way to get the settings we need
 */
function rooms_availability_colorbox_settings_alter(&$settings, &$style) {
}

function rooms_availability_date_range_fields($year, $month) {
  $date_range_fields = array();

  $date_format = str_replace('-', '/', variable_get('rooms_date_format', 'd-m-Y'));

  $date_range_fields['rooms_start_date'] = array(
    '#prefix' => '<div class="start-date">',    
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#title' => t('Start Date'),
    '#date_type' => DATE_DATETIME,
    '#date_format' => $date_format,
    '#date_increment' => 1,
    '#date_year_range' => '-1:+3',
    '#required' => TRUE,
  );

  $date_range_fields['rooms_end_date'] = array(
    '#prefix' => '<div class="end-date">',    
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#title' => t('End Date'),
    '#date_type' => DATE_DATETIME,
    '#date_format' => $date_format,
    '#date_increment' => 1,
    '#date_year_range' => '-1:+3',
    '#required' => TRUE,
  );
  
  drupal_add_js(array('rooms' => array(
      'roomsStartYear' => $year,
      'roomsStartMonth' => $month,
      'roomsDateFormat' => rooms_dateFormatTojQueryUIDatePickerFormat($date_format),
    )), 'setting');
  drupal_add_js(drupal_get_path('module', 'rooms_availability') . '/js/rooms_availability_date_popup.js');

  return $date_range_fields;
}
