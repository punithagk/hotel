<?php

/**
 * @file
 * Manage Bookings - Bookings are tied to a customer profile and possible a Unit ID and Order ID
 */  



/**
 * Implement hook_menu()
 */
function rooms_booking_menu() {
  $items  =  array();
  
  $items['admin/rooms/bookings/customers'] = array(
    'title' => 'Customers',
    'page callback' => 'rooms_booking_get_client_profiles',
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/rooms/bookings/room_types'] = array(
    'title' => 'Room Types',
    'page callback' => 'rooms_booking_get_room_types',
    'access arguments' => array('administer bookings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implement hook_entity_info().
 */
function rooms_booking_entity_info() {
  $return['rooms_booking'] = array(
    'label' => t('Bookings'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'RoomsBooking',
    'controller class' => 'RoomsBookingController',
    'base table' => 'rooms_bookings',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'booking_id',
        'bundle' => 'type',
    ),
    // Bundles are defined by the booking types below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'rooms_booking_create',
    'access callback' => 'rooms_booking_access',
    'module' => 'rooms_booking',
    // The information below is used by the RoomsRoomUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/rooms/bookings',
      'file' => 'rooms_booking.admin.inc',
      'controller class' => 'RoomsBookingUIController',
      'menu wildcard' => '%rooms_booking',
    ),
  );
  // The entity that holds information about the entity types	  
  $return['rooms_booking_type'] = array(
    'label' => t('Booking Type'),
    'entity class' => 'RoomsBookingType',
    'controller class' => 'RoomsBookingTypeController',
    'base table' => 'rooms_booking_type',
    'fieldable' => FALSE,
    'bundle of' => 'rooms_booking',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'rooms_booking_type_access',
    'module' => 'rooms_booking',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/rooms/bookings/booking-types',
      'file' => 'rooms_booking_type.admin.inc',
      'controller class' => 'RoomsBookingTypeUIController',
    ),
  );

  return $return;
}


/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the booking types via a hook to avoid a recursion
 * issue as loading the room types requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function rooms_booking_entity_info_alter(&$entity_info) {
  foreach (rooms_booking_get_types() as $type => $info) {
    $entity_info['rooms_booking']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/rooms/bookings/booking-types/manage/%rooms_booking_type',
        'real path' => 'admin/rooms/bookings/booking-types/manage/' . $type,
        'bundle argument' => 5,
        'access arguments' => array('administer bookings'),
      ),
    );
  }
}
  

/**
 * Implements hook_permission().
 */
function rooms_booking_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer booking types' => array(
      'title' => t('Administer booking types'),
      'description' => t('Create and delete fields for booking types, and set their permissions.'),
    ),
    'administer bookings' => array(
      'title' => t('Administer bookings'),
      'description' => t('Edit and delete all bookings'),
    ),  
  );
  
  //Generate permissions per room 
  foreach (rooms_booking_get_types() as $type) {
    $type_name = check_plain($type->type);
    $permissions += array(
      "edit any $type_name booking" => array(
        'title' => t('%type_name: Edit any booking', array('%type_name' => $type->label)),
      ),
      "view any $type_name booking" => array(
        'title' => t('%type_name: View any booking', array('%type_name' => $type->label)),
      ),
    );
  }
  return $permissions;  
}


/**
 * Determines whether the given user has access to a booking.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $room
 *   Optionally a booking or a booking to check access for. If nothing is
 *   given, access for all bookings is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function rooms_booking_access($op, $booking = NULL, $account = NULL) {
  if (user_access('administer bookings', $account)) {
    return TRUE;
  }
  if (isset($booking) && $type_name = $booking->type) {
    $op = ($op == 'view') ? 'view' : 'edit';
    if (user_access("$op any $type_name booking", $account)) {
      return TRUE;
    }
  }
  return FALSE;
}


/**
 * Access callback for the entity API.
 */
function rooms_booking_type_access($op, $type = NULL, $account = NULL) {
  return user_access('administer booking types', $account);
}


/**
 * Gets an array of all booking types, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return RoomsBookingType[]
 *   Depending whether $type isset, an array of booking types or a single one.
 */
function rooms_booking_get_types($type_name = NULL, $reset = FALSE) {
  // entity_load will get the Entity controller for our booking entity and call the load
  // function of that object.
  $types = entity_load_multiple_by_name('rooms_booking_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}



/**
 * Menu argument loader; Load a booking type by string.
 *
 * @param $type
 *   The machine-readable name of a booking type to load.
 * @return
 *   A booking type array or FALSE if $type does not exist.
 */
function rooms_booking_type_load($type, $reset = FALSE) {
  return rooms_booking_get_types($type, $reset);
}


/**
 * Fetch a booking object. Make sure that the wildcard you choose 
 * in the boking entity definition fits the function name here.
 *
 * @param $booking_id
 *   Integer specifying the booking id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $booking object or FALSE if it cannot be loaded.
 *
 * @see rooms_booking_load_multiple()
 */
function rooms_booking_load($booking_id, $reset = FALSE) {
  $bookings = rooms_booking_load_multiple(array($booking_id), array(), $reset);
  return reset($bookings);
}


/**
 * Load multiple bookings based on certain conditions.
 *
 * @param $booking_ids
 *   An array of booking IDs.
 * @param $conditions
 *   An array of conditions to match against the {rooms_bookings} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of booking objects, indexed by booking_id.
 *
 * @see entity_load()
 * @see rooms_booking_load()
 */
function rooms_booking_load_multiple($booking_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('rooms_booking', $booking_ids, $conditions, $reset);
}


/**
 * Deletes a booking
 *
 * @param RoomsBooking $booking
 * The RoomsBooking object that represents the booking to delete
 *
 * @todo Deleting a booking shoule fire a hook and or rule event
 */
function rooms_booking_delete(RoomsBooking $booking) {
  $booking->delete();
}


/**
 * Delete multiple bookings.
 *
 * @param $booking_ids
 *   An array of booking IDs.
 */
function rooms_booking_delete_multiple(array $booking_ids) {
  entity_get_controller('rooms_booking')->delete($booking_ids);
}


/**
 * Create a booking object.
 */
function rooms_booking_create($values = array()) {
  return entity_get_controller('rooms_booking')->create($values);
}


/**
 * Saves a booking to the database.
 *
 * @param RoomsBooking $booking
 *   The Booking object.
 */
function rooms_booking_save(RoomsBooking $booking) {
  return $booking->save();
}


/**
 * Saves a booking type to the db.
 */
function rooms_booking_type_save(RoomsBookingType $type) {
  $type->save();
}


/**
 * Deletes a booking type from the db.
 */
function rooms_booking_type_delete(RoomsBookingType $type) {
  $type->delete();
}


/**
 * URI callback for bookings
 */
function rooms_booking_uri(RoomsBooking $booking) {
  return array(
    'path' => 'booking/' . $booking->booking_id,
  );
}


/**
 * Menu title callback for showing individual entities
 */
function rooms_booking_page_title(RoomsBooking $booking) {
  return $booking->name;
}



/**
 * Get a list of Booking keyed by id and name in value
 *
 * @todo - double check utility of this and perhaps use rooms_booking_load_multiple
 */
function rooms_booking_ids($conditions = array()) {
  
  $bookings = array();
  
  $query = new EntityFieldQuery();
  
  $result = $query->entityCondition('entity_type', 'rooms_booking')
                    ->execute();

  if (count($result) > 0 ) { 
    $entities = entity_load('rooms_booking', array_keys($result['rooms_booking']));
    foreach ($entities as $booking) {
      $wrapper = entity_metadata_wrapper('rooms_booking', $booking);
      $bookings[$wrapper->booking_id->value()] = $wrapper->name->value();
    }
  }

  return $bookings;
}

/**
 * Sets up content to show an individual booking
 * @todo - get rid of drupal_set_title();
 */
function rooms_booking_page_view($booking, $view_mode = 'full') {    
  $controller = entity_get_controller('rooms_booking');  
  $content = $controller->view(array($booking->booking_id => $booking));
  drupal_set_title($booking->name);
  return $content;
}


/**
 * Implements hook_views_api().
 */
function rooms_booking_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'rooms_booking') . '/views',
  );
}


/**
 * Implement hook_theme().
 */
function rooms_booking_theme() {
  return array(
    'rooms_booking_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'rooms_booking.admin.inc',
    ),
    'rooms_booking' => array(
      'render element' => 'elements',
      'template' => 'rooms_booking',
    ),
   'rooms_booking_extra_data' => array(
      'variables' => array('booking_extra_data', 'booking' => NULL),
      'template' => 'rooms_booking-extra-data',
    ),
  );
}  


/**
 * Implements hook_menu_local_tasks_alter().
 */
function rooms_booking_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/rooms/rooms/add' on 'admin/rooms/rooms'.
  if ($root_path == 'admin/rooms/bookings') {
    $item = menu_get_item('admin/rooms/bookings/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}


function rooms_booking_get_client_profiles($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('field_data_commerce_customer_address')
      ->fields('field_data_commerce_customer_address', array('commerce_customer_address_name_line', 'entity_id'))
      ->condition('commerce_customer_address_name_line', db_like($string) . '%', 'LIKE')
      ->condition('entity_type', 'commerce_customer_profile')
      ->condition('bundle', 'billing')
      ->range(0, 10)
      ->execute();
    foreach ($result as $customer) {
      $matches[$customer->commerce_customer_address_name_line . ':' . $customer->entity_id] = check_plain($customer->commerce_customer_address_name_line);
    }
  }

  drupal_json_output($matches);
}


function rooms_booking_get_room_types($string = '') {
  $matches = array();
  if ($string) {
    $result = db_select('rooms_booking_type')
      ->fields('rooms_booking_type', array('type'))
      ->condition('type', db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $room_type) {
      $matches[$room_type->type] = check_plain($room_type->type);
    }
  }

  drupal_json_output($matches);
}


/**
 * The class used for room entities
 */
class RoomsBooking extends Entity {
  
  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_booking');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'booking/' . $this->booking_id);
  }
  
  
}


/**
 * The class used for room type entities
 */
class RoomsBookingType extends Entity {
  
  public $type;
  public $label;
  
  public function __construct($values = array()) {
    parent::__construct($values, 'rooms_booking_type');
  }
  
}


/**
 * The Controller for RoomsBooking entities
 */
class RoomsBookingController extends EntityAPIController {
  
  
  public function __construct($entityType) {
    parent::__construct($entityType);
  }


  /**
   * Create a booking - we first set up the values that are specific
   * to our booking but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the booking.
   *
   * @return
   *   A booking object with all default fields initialized.
   */
  public function create(array $values = array()) {
    $booking_type = rooms_booking_type_load($values['type'], TRUE);

    // Add values that are specific to our Room
    $values += array( 
      'booking_id' => '',
      'is_new' => TRUE,
      'original' => TRUE,
      'title' => '',
      'created' => '',
      'changed' => '',
      'data' => array(),
    );
    
    $booking = parent::create($values);
    return $booking;
  }
  
  /**
   * Overriding the buildContent function to add entity specific fields
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    
//    $content['rooms_booking_extra_data'] =  array(
//      '#markup' => theme('rooms_booking_extra_data', array('rooms_booking_extra_data' => check_plain($entity->data['extra_data']), 'rooms_booking' => $entity)),
//    );

    return $content;
  }
  
}


/**
 * The Controller for Booking Type entities
 */
class RoomsBookingTypeController extends EntityAPIControllerExportable {
  public function __construct($entityType) {
    parent::__construct($entityType);
  }
  
   /**
   * Create a booking type - we first set up the values that are specific
   * to our booking type schema but then also go through the EntityAPIController
   * function.
   * 
   * @param $type
   *   The machine-readable type of the booking.
   *
   * @return
   *   A booking type object with all default fields initialized.
   */
  public function create(array $values = array()) {
    // Add values that are specific to our Booking Type
    $values += array( 
      'id' => '',
      'is_new' => TRUE,
      'data' => '',
    );
    $booking_type = parent::create($values);
    return $booking_type;
  }

}